While the software for the nodes is almost entirely direct hardware interraction, the software for the server is almost entirely done through http requests. The general flow of data will start from a user logging into the webservice. After being authenticated, they will see the main page(s) of the webapp.

Upon connection, the frontend will kick off an asyncronous background task on a timer to send requests to the nodes for status updates. This means the user will get a close to realtime view of what all of the nodes are doing. From there, a user can do any number of actions. Any given action a user can do will send off an asynchonous javascript request which either will make modifications to the database (or cron job for schedules), or request updated data from the server to update the UI elements on the webpage.

For example, if a user wants to add a new rule, they'll fill out the information on the webpage, and click submit (html), which will send a request (javascript) to the middleware (python), which will then add the new rule to the database. If that rule happens to immediately update the state of the node, a request will also be sent to the node to change it's state. Finally this will kick off a response from the node which will communicate back to the server with its most up to date status.